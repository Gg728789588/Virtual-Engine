//x: miplevel y: index
cbuffer Params : register(b0)
{
    uint2 _ScreenSize;
}

Texture2D<uint> _FeedBackTexture : register(t0, space0);
RWStructuredBuffer<uint> _FeedBackBuffer : register(u0, space0);
groupshared uint2 groupData[64];

uint2 GetData(uint2 index, uint threadCount)
{
    return groupData[index.y * threadCount + index.x];
}
void SetData(uint2 index, uint threadCount, uint2 data)
{
    groupData[index.y * threadCount + index.x] = data;
}
[numthreads(8, 8, 1)]
void SetKernel(uint2 id : SV_DISPATCHTHREADID, uint2 localID : SV_GROUPTHREADID, uint2 groupID : SV_GROUPID)
{
    uint threadCount = 8;
    uint value = _FeedBackTexture[clamp(id, 0, _ScreenSize - 1)];
    uint texIndex = value & 4095;
    uint texMip = value >> 12;
    SetData(localID, threadCount, uint2(texIndex, texMip));
    uint2 datas[4];
    uint2 choosedData = 0;
    for(uint i = 0; i < 2; ++i)
    {
        uint doubleCount = threadCount;
        threadCount /= 2;
        bool enabled = all(localID < threadCount);
        GroupMemoryBarrierWithGroupSync();
        if(enabled)
        {
            datas[0] = GetData(localID * 2, doubleCount);
            datas[1] = GetData(localID * 2 + uint2(1, 0), doubleCount);
            datas[2] = GetData(localID * 2 + uint2(0, 1), doubleCount);
            datas[3] = GetData(localID * 2 + 1, doubleCount);
        }
        GroupMemoryBarrierWithGroupSync();
        if(enabled)
        {
            if(datas[0].y == datas[1].y)
            {
                choosedData.y = datas[0].y;
                choosedData.x = min(datas[0].x, datas[1].x);
            }
            else if(datas[1].y == datas[2].y)
            {
                choosedData.y = datas[1].y;
                choosedData.x = min(datas[1].x, datas[2].x);
            }
            else if(datas[2].y == datas[3].y)
            {
                choosedData.y = datas[2].y;
                choosedData.x = min(datas[2].x, datas[3].x);
            }
            else if(datas[3].y == datas[0].y)
            {
                choosedData.y = datas[3].y;
                choosedData.x = min(datas[3].x, datas[0].x);
            }
            else if(datas[0].y == datas[2].y)
            {
                choosedData.y = datas[0].y;
                choosedData.x = min(datas[0].x, datas[2].x);
            }
            else if(datas[1].y == datas[3].y)
            {
                choosedData.y = datas[1].y;
                choosedData.x = min(datas[1].x, datas[3].x);
            }
            else choosedData = datas[0];
            SetData(localID, threadCount, choosedData);
        }
    }
    if(all(localID < 2) && all(id < _ScreenSize))
    {
        uint2 dispID = groupID * 2 + localID;
        uint downSampledSize = _ScreenSize.x / 4;
        uint index = downSampledSize * dispID.y + dispID.x;
        uint value = choosedData.x & 65535;
        value <<= 16;
        value |= choosedData.y & 65535;
        _FeedBackBuffer[index] = value;
    }

}