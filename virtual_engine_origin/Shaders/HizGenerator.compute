#include "Include/Sampler.cginc"
RWTexture2D<float> _DepthTexture[9] : register(u0, space0);
Texture2D<float> _CameraDepthTexture : register(t0, space0);
static const float2 _Resolution = float2(1024, 512);

groupshared float mipCaches[32][32];
float GetData(uint2 index)
{
    return mipCaches[index.x][index.y];
}
void SetData(uint2 index, float value)
{
    mipCaches[index.x][index.y] = value;
}
[numthreads(32,32,1)]
void GenerateMip(uint2 id : SV_GROUPID, uint2 dispatchID : SV_DISPATCHTHREADID, uint2 groupID : SV_GROUPTHREADID)
{
    uint2 avaliableElement = 32;
    bool stillEnabled = true;
    

    float data = min(min(_DepthTexture[0][dispatchID * 2], _DepthTexture[0][dispatchID * 2 + uint2(0, 1)]),
    min(_DepthTexture[0][dispatchID * 2 + uint2(1, 0)], _DepthTexture[0][dispatchID * 2 + uint2(1, 1)]));
    SetData(groupID,data);
    _DepthTexture[1][dispatchID] = data;
    avaliableElement /= 2;
    if(any(groupID >= avaliableElement)) stillEnabled = false;
    for(uint i = 2; i < 7; ++i)
    {
        GroupMemoryBarrierWithGroupSync();
        if(stillEnabled)
        {
            dispatchID = id * avaliableElement + groupID;
            data = min(min(GetData(groupID * 2), GetData(groupID * 2 + uint2(1, 0))),
            min(GetData(groupID * 2 + uint2(0, 1)), GetData(groupID * 2 + uint2(1, 1))));
            _DepthTexture[i][dispatchID] = data;
        }
        GroupMemoryBarrierWithGroupSync();
        if(stillEnabled)
        {
            SetData(groupID, data);
            avaliableElement /= 2;
            if(any(groupID >= avaliableElement)) stillEnabled = false;
        }
    }
}

[numthreads(16, 8, 1)]
void GenerateMip1(uint2 id : SV_GROUPID, uint2 dispatchID : SV_DISPATCHTHREADID, uint2 groupID : SV_GROUPTHREADID)
{
    uint mipLevel = 6;
    
    uint2 avaliableElement = uint2(16,8);
    avaliableElement /= 2;
    bool stillEnabled = !any(groupID >= avaliableElement);
    mipCaches[groupID.x][groupID.y] = _DepthTexture[mipLevel][dispatchID];
    //TODO
    //Use Group Shared
    float data = 0;
    for(uint i = 1; i < 3; ++i)
    {
        GroupMemoryBarrierWithGroupSync();
        if(stillEnabled)
        {
            dispatchID = id * avaliableElement + groupID;
            data = min(min(GetData(groupID * 2), GetData(groupID * 2 + uint2(1, 0))),
            min(GetData(groupID * 2 + uint2(0, 1)), GetData(groupID * 2 + uint2(1, 1))));
            _DepthTexture[mipLevel + i][dispatchID] = data;
        }
        GroupMemoryBarrierWithGroupSync();
        if(stillEnabled){
            SetData(groupID, data);
            avaliableElement /= 2;
            if(any(groupID >= avaliableElement)) stillEnabled = false;
        }

    }
}

[numthreads(8,8,1)]
void UpdateDepth(uint2 id : SV_DISPATCHTHREADID)
{
    float2 uv = (id + 0.5) / _Resolution;
    float2 offsetUV = 0.25 / _Resolution;
    float4 depth = float4( _CameraDepthTexture.SampleLevel(pointClampSampler, uv + offsetUV, 0),
    _CameraDepthTexture.SampleLevel(pointClampSampler, uv - offsetUV, 0),
    _CameraDepthTexture.SampleLevel(pointClampSampler, uv + float2(offsetUV.x, -offsetUV.y), 0),
    _CameraDepthTexture.SampleLevel(pointClampSampler, uv - float2(offsetUV.x, -offsetUV.y), 0));
    depth.xy = min(depth.xy, depth.zw);
    _DepthTexture[0][id] = min(depth.x, depth.y);
}